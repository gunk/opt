package xo

// SkipPrefix is an option to skip package prefixes when creating the table
// name.
type SkipPrefix bool

// Manual is the manual option to mark the struct without an autogenerated
// primary key field.
type Manual bool

// HasMany is an option to add a one-to-many relation to a message.
type HasMany struct {
	// Name is the unique name identifying the relation.
	Name string
	// TypeSuffix is the suffix of the protobuf type of the element.
	TypeSuffix string
}

// Ignore skips the corresponding field or struct type from inclusion from
// marshalling.
type Ignore bool

// Embed is the option to embed the type with JSON instead of a separate
// table.
// 
// If Embed is an option on a struct field, that column will be embedded as
// well, regardless of the value of the Embed option on the corresponding
// struct.
type Embed bool

// Nullable is the option to allow the field to be nullable in the database.
type Nullable bool

// IndexType is the generated index type for the corresponding column.
type IndexType int

const (
	Index IndexType = iota
	Unique
)

// Default is the default value option for the corresponding field.
type Default string 

// Ref is an option to add a referential relation to a message.
type Ref struct {
	// TypeSuffix is a unique suffix identifying the type of the referenced table.
	TypeSuffix string
	// FieldName is the name of the field that the current field references.
	FieldName string
}
